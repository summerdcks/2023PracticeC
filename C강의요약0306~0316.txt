C언어 시작하기
프로그래밍 언어: 인간과 컴퓨터가 대화를 하기 위한 언어
컴파일: 기계어로 변환
소스코드: 컴파일되기 전 사용자가 작성한 코드

#include <stdio.h>
main()
{
	(); 
}

헤더파일: 사전에 정의된 라이브러리 함수들이 포함
stdio: 표준입출력에 관한 라이브러리 함수 standard input output
main()
중괄호 {} : 코드블록 코드의 범위
함수 () :  실행할 내용
세미콜론 ; : 마침표
주석 // : 컴퓨터가 인식x

상수 constant 변하지 않는 기본값, 값이 의도하지 않게 바뀌는 것을 방지
변수 variable 값을 저장하는 공간
int number; 변수의 선언: 처음 변수의 지정
변수 = 값; 변수에 값을 할당

자료형(data type): 저장되는 데이터의 종류에 따른 형태
자료형에 따라 저장될 수 있는 값의 종류와 범위가 결정되어 있음
자료형의 크기와 범위
정수형 변수: char, int, unsigned int, short, long, long long...(저장할 수 있는 크기가 다름)
실수형 변수: float, double...
형태가 없는 자료형: void
서식지정자
%d char, short, int 10진 정수
%ld long
%lld long long
%u unsigned int 부호없는 10진 정수
%f float 10진 실수
%c char, short, int 값에 대응하는 문자
%s char(문자열) 문자열
%p void(주소값) 포인터 주소값 함수의 반환값

오버플로: 프로그래밍에서, 메모리 용량을 넘어선 값이 들어가 생기는 오류
언더플로

문자자료형: C 언어는 정수 자료형 char에 문자 한 개를 저장
char 자료형은 문자를 바로 저장하지 않고 문자에 해당하는 정숫값을 저장
아스키코드: 문자는 각 문자에 해당하는 아스키코드 값(정수)으로 바뀌어 문자형 변수에 저장
서식을 지정하여 문자를 숫자로, 숫자를 문자로 출력할 수 있음
%d 문자a->65

#include <stdio.h>  //헤더파일(전처리 구문) 
main ()             //C프로그램에서 시작과 끝을 가지고 있는 기본 함수
{                   //블록의 시작
int __,a = 3;       //변수명 지정
char b = 'A';       //아스키코드
__ = a + 6;         //'+'는 연산자
printf ( "%d", __);// __ = 9
printf ( "%c", b);//입력과출력
printf ( "%d", b);//입력과출력
// printf ( "% d \ n", a); '//' 주석으로 컴퓨터가 인식X
}                   // 블록의 끝

입력과 출력
제어문자   코드의 큰따옴표(" ") 안에서 출력에 어떠한 효과를 주는 문자
서식 지정자   ‘%d’는 큰따옴표(" ")다음에 있는 값(상수나 변수)의 출력 서식을 정해주는 역할
printf()   사용가가 원하는 값을 화면에 출력하는 라이브러리 함수 print format
\n   줄바꿈 제어문자
\t   탭 제어문자
%5d   5칸 만들어 오른쪽정렬
%3.1f   3칸 오른쪽 정렬, 소수점 아래 1자리만 출력
scanf(서식, 변수의 주소)   키보드 부터 입력된 데이터를 읽어 들이는 함수 scan format
&   참조연산자 변수의 메모리 주소를 알려주는 표현 scanf에 필수

#include <stdio.h> 
main () 
{ 
float a; 
char b; 
char c [10];   //변수의 선언
scanf ( "%f %c %s", &a, &b, &c);  //입력
printf ( "%f %c %s", a, b, c);  //출력
}

연산자
어떠한 함수에 대해 특정한 작업을 하기 위해서 사용하는 기호 +, -, =...
대입연산자 a = 1 (a에 1을 대입)
산술연산자 + - * / %(나눈 뒤 나머지)
비교연산자 a ==1 (a는 1이다. 같음) !=(다름) < > ...
증감연산자 ++ --
복합대입연산자 += -= *= /=

number = number +1 ; number에서 1을 더한 뒤 다시 number에 저장

number = number +1 ;
number += 1 ;
number++ ;
모두 1을 더하라는 의미

++a 선증감 후출력
a++ 선출력 후증감

나머지연산자 홀짝구분
a%2=0 : 짝수
a%2=0 : 홀수

자료형의 확장
자료형을 섞어서 쓰면 컴파일러에서 암시적 형 변환(implicit type conversion)을 함
자료형의 크기가 큰 쪽, 표현 범위가 넓은 쪽으로 자동 변환됨
형 확장(type promotion) : 값이 버려지지 않고 그대로 보전됨
ex실수가 정수보다 표현 범위가 넓기 때문에 정수와 실수를 함께 연산하면 결과값은 실수로 나옴

자료형의 축소
형 축소(type demotion) : 자료형의 크기가 작은 쪽, 표현 범위가 좁은 쪽으로 변환되는 것
형 축소가 일어나면 값의 손실이 일어남, 내림
컴파일 경고가 나오지 않게 하려면 형 변환(type conversion, type casting)을 해야 함

명시적 형변화
##include <stdio.h>
int main()
{ 
	int number1 = 20;
	float number2 = 30.5;
	int sum;
	
	sum = (int)((float)number1+(float)number2));
	
	printf("%d", sum);
	
	return 0;
}	

if 조건문

#include <stdio.h>
int main()

{
if (조건 1){
조건 1이 참일 경우 실행되는 명령
}

else if (조건 2){
조건 2가 참일경우 실행되는 명령
}

else{
위의 모든 조건이 맞지 않을 경우 실행되는 명령
}

}
if, else, else if 끝에는 세미콜론x
중괄호 if, else로 실행할 코드할 1줄:생략가능 두줄이상:필수
ex. else가 중괄호 밖에 있으면 if와 상관없이 항상 실행됨

if 조건문은 분기(branch, 둘 이상으로 갈라지다, 도로의 분기점)를 위한 문법
if는 조건식이 만족할 때 else는 조건식이 만족하지 않을 때
else if는 else인 상태에서 조건식을 지정할 때 사용
else, else if는 if 조건문 뒤에 오며 단독으로 사용할 수 없음
else if 앞에 else가 오면 컴파일 에러 발생 주의

C언어는 0은 부정(거짓), 0이 아닐때 긍정(참)으로 인식한다
=(할당연산자) 와 ==(등호) 실수 주의
if조건문 안에 if조건문 가능

&& and
|| or


Switch 분기문

switch (조건식){
case 값 1:
조건식이 값 1일 때 실행되는 명령문;
break;
case 값 2:
조건식이 값 2일 때 실행되는 명령문;
break;
default:조건식의 값이 case 값에 없을 경우 맨마지막에 실행되는 명령문;
}

메뉴구성, 하드웨어에서 많이 씀
형식이 균일하며 처리할 조건이 많을 때 사용
switch 분기문은 항상 case와 함께 사용
변수에 지정한 값이 case에 지정한 값과 일치하면 코드 실행
아무 case에도 해당하지 않으면 default의 코드를 실행(default는 생략 가능)
break 종료명령 case를 break로 중단하지 않으면 그다음에 있는 case, default가 계속 실행됨

삼항연산자 거의 안씀
result = (a>10) ? 5 : 10 ;

If(a>10)
{
	result = 5;
}
Else
{
	result = 10;
}

BOOL 자료형(자바에서는 불린)
불(boolean) 자료형(논리 자료형) : 참과 거짓을 나타냄
그냥 보기 좋으라고 1,0을 true, false로 표현
bool b1 = true ;
bool b2 = false ;

연산자 우선순위
수학과 같음
코드는 깔끔하게 웬만하면 괄호 많이 이용

비트연산: 하드웨어 프로그래밍에서 중요 응용sw에서는 거의 안씀

#include <math.h>
sqrt() 루트
pow() 제곱

//거스름돈 1원단위 처리
calcChange = changeResult%10; //1152 % 10 =? 2
changeResult -= calcChange; //1152


for 반복문
세미콜론 2개 필수
컴퓨터가 하는게 효과적일 때 사용
Int를 괄호 안에서 선언하면 중괄호 밖에서 실행x
정해진 횟수일때 쓰기 좋은 반복문
변수 여러개, 조건 여러개 가능
거의 더하기 빼기가 다수
for 반복문은 if 조건문과 마찬가지로 끝에 ; (세미콜론)을 붙이면 안 됨
중괄호 걍 써라 코드 한줄이든 두줄이든
변수를 많이 만들고 상수처럼 쓰는 것이 용이함

for(초기식 ; 조건문 ; 변화식)
초기식이 조건문을 만족할 때 시작

for (1; 2; 3;){
4
}
 
순서
1 → 2(참일 경우) → 4 → 3 → 2 → 4 → 3 → 2 → 4 → 3 → …(반복)→ 2(거짓일 경우) → for문 종료



while
조건이 참일 동안 계속 명령을 실행하고 조건이 거짓이면 종료
무한반복일 때, 반복 횟수가 정해져있지 않을 때 주로 사용
for 반복문과 마찬가지로 끝에 ; (세미콜론)을 붙이면 안 됨
while(true)무한루프

while (반복 조건)
{
반복 조건이 참일 경우 실행되는 명령문
}  //정상적으로 실행된 뒤 1행으로 돌아간다.
 
//while 옆의 반복조건이 거짓일 경우 종료된다.

do ~ while
얘도 반복횟수가 정해지지 않았을 때 주로 사용
반복 조건이 아래에 있어 일단 do 블록을 한 번 실행한 후 반복 조건을 확인
따라서, 조건이 거짓인 경우에도 최소 한 번은 실행!!

do{
반드시 실행되는 명령문
} while(반복 조건); //반복 조건이 참이 될 경우 1행으로 이동, 거짓일 경우 종료
 
// do ~ while문은 do {}안의 명령이 먼저 실행되고 while 의 반복 조건을 비교합니다.



break는 for ,while, do while, switch 문법에서 제어흐름을 벗어나기 위해 사용
continue는 이후 명령을 실행하지 않고 조건을 판단하는 부분으로 넘어갈 때 사용


잠시 꿀팁!!
rand() 함수 : 임의의 수를 만들어 준다  (게임 등에 사용)
rand() % 10 => 임의의 수를 10으로 나눈 나머지 이므로 0~9 사이의 값만 나오게 됨.


배열
종류가 같은 여러개의 데이터를 처리하기 쉽게 나열한 것
자료형의 변수를 일렬로 늘어놓은 형태
반복문을 활용하면 연속적이고 반복되는 값을 쉽게 처리할 수 있음

score는  배열의 이름, [ ]속의 숫자들은 참조 번호(index)
 [ ]안의 숫자에 따라 각각 다른 크기를 가지고 있습니다.  

예시   
자료형 배열이름[크기];
자료형 배열이름[크기] = { 값, 값, 값 }; sizeof(자료형 *)

int         score[10];            // [ ] 안의 숫자의 개수만큼 변수가 지정
↑자료형  ↑배열 이름[크기];

자료형 배열이름[크기] = { 0, };
or
 배열이름[크기] = {0}
//배열의 요소를 모두 0으로 초기화

배열[인덱스] = 값;(요소:배열에 값이 저장된 공간)
범위를 벗어난 인덱스를 입력하면 쓰레기값이 나온다

2차원배열
ex맵만들기 미로찾기
자료형 배열이름[세로크기][가로크기] = { { 값, 값, 값 }, { 값, 값, 값 } };
배열[세로인덱스][가로인덱스] = 값;
numArr[3][4] //3행4열
2차원배열 선언했으니 1차원 요소지정은 안됨 numArr[1]=2 이런거 안돼
2차원배열 초기화 int numArr[3][4] = {0};

행렬시작은 0부터
0행 
0열

for문이 2중일 때, *****중요
for(int i = 0 ; i < row ; i++)		//행
{
	for(int j = 0 ; j < col ; j++)	//열
	{
		print("%d", NumArr[i][j]);
	}
}

다차원배열
3D게임 등에서 이용
자료형 배열이름[높이][세로크기][가로크기];
배열[높이인덱스][세로인덱스][가로인덱스] = 값;


함수
무조건 main부터 실행
함수는 특정 용도의 코드를 한 곳에 모아놓은 것
반복되는 것을 하나의 기능으로 묶음
처음 한 번만 작성하면 나중에 계속 불러 쓸 수 있음
코드에 실수가 있을 때 수정이 용이함

반환값자료형 함수이름() {
 }

던져줄 값이 없으면 void(그냥 그대로 출력) : 반환값이 없으므로 return이 필요없음
던진 값에 대한 반환값이 있을 때 다른 여러 함수 사용 :return 필수

입력은 여러개 되지만 출력되는 반환값return은 1개
반환값을 여러개로 하고 싶으면 입력을 배열로, 반환도 배열로, 자바에선 됨 

함수는 main 위에 위치해야 한다. 그래야 계산식을 받을 수 있음
Main 을 맨 위에 쓰려면? 함수의 형태만 main 위에 정의 해 두고, 내용은 아래에 작성한다. 이상적.

Parameter란?
함수 호출 할 때, 사용할 데이터를 전달해준다
함수에서 해당 데이터를 활용해서 결과를 전달해 주는 것이 일반적임
함수 선언시 괄호 () 안에 매개변수 선언
한개씩 선언해야 함.
여러 개를 선언할 수 있음.
매개변수 개수와 호출 시 개수가 맞아야 함.

참고)코드 밖에서 변수를 선언하는 것은 권장하지 않음.
메모리를 계속 잡아먹고 값이 변했을 때 찾기 어려움. 충돌할 수 있음.
변수는 되도록 그 코드 안에서 선언하고 해결까지 하자







